steps:
  # ------------------------------------------------------------
  # 1) RUN UNIT TESTS
  # ------------------------------------------------------------
  - name: "python:3.10-slim"
    id: "run-tests"
    dir: "/workspace" # Force Cloud Build to run commands from repo root
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        echo "Installing test deps..."
        pip install --no-cache-dir -r mlops-cat-classifier/tests/requirements-unit-test.txt
        echo "Checking workspace contents..."
        pwd
        ls -R /workspace
        echo "Running tests..."
        pytest mlops-cat-classifier/tests --maxfail=1 --disable-warnings -v

  # ------------------------------------------------------------
  # 2) BUILD & PUSH EXECUTOR IMAGE (tags: commit SHA + latest)
  # ------------------------------------------------------------
  - name: "gcr.io/cloud-builders/docker"
    id: "build-executor"
    waitFor: ["run-tests"]
    args:
      - build
      - -t
      - ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_EXECUTOR_IMAGE_NAME}:$SHORT_SHA
      - -t
      - ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_EXECUTOR_IMAGE_NAME}:latest
      - /workspace/mlops-cat-classifier/builder_tool/pipeline_executor

  - name: "gcr.io/cloud-builders/docker"
    id: "push-executor-sha"
    waitFor: ["build-executor"]
    args:
      - push
      - ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_EXECUTOR_IMAGE_NAME}:$SHORT_SHA

  - name: "gcr.io/cloud-builders/docker"
    id: "push-executor-latest"
    waitFor: ["build-executor"]
    args:
      - push
      - ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_EXECUTOR_IMAGE_NAME}:latest

  # ------------------------------------------------------------
  # 3) COMPILE PIPELINE (Python → YAML)
  # ------------------------------------------------------------
  - name: "python:3.10-slim"
    id: "compile-pipeline"
    waitFor: ["push-executor-sha"]
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        echo "Installing Vertex AI / KFP SDK..."
        pip install --no-cache-dir kfp==2.14.4 google-cloud-aiplatform==1.118.0
        echo "Compiling Vertex AI pipeline → ${_PIPELINE_YAML}"
        python mlops-cat-classifier/pipelines/vertex_ai_pipeline.py gcs
        test -f "${_PIPELINE_YAML}" && echo "Pipeline compiled."

  # ------------------------------------------------------------
  # 4) DOWNLOAD PARAMETERS.JSON
  # ------------------------------------------------------------
  - name: "gcr.io/cloud-builders/gsutil"
    id: "fetch-params"
    waitFor: ["compile-pipeline"]
    args:
      - cp
      - gs://${_CONF_REPO}/parameters.json
      - .

  # ------------------------------------------------------------
  # 5) SUBMIT PIPELINE TO VERTEX AI
  # ------------------------------------------------------------
  - name: ${_LOCATION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_EXECUTOR_IMAGE_NAME}:$SHORT_SHA
    id: "submit-pipeline"
    waitFor: ["fetch-params"]
    args:
      - --name=cat-classifier-pipeline-$SHORT_SHA
      - --pipeline_def=${_PIPELINE_YAML}
      - --pipeline_root=gs://${_TEMP_REPO}
      - --parameter_dict=./parameters.json

options:
  logging: CLOUD_LOGGING_ONLY
